var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#SteadyStateSolvers-module","page":"API","title":"SteadyStateSolvers module","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = HSSModel.SteadyStateSolvers","category":"page"},{"location":"api/","page":"API","title":"API","text":"hox_ss_solver\nSteadyStateOptions\nSteadyStateResult\nnonlin_nox_analytic_model","category":"page"},{"location":"api/#HSSModel.SteadyStateSolvers.hox_ss_solver","page":"API","title":"HSSModel.SteadyStateSolvers.hox_ss_solver","text":"hox_ss_solver(no::Real, no2::Real, phox::Real, vocr::Real, alpha::Real; no2_no::Real=4, options::SteadyStateOptions=SteadyStateOptions())::SteadyStateResult\n\nSolve the NOx-HOx steady state system for a given set of NOx, P(HOx), VOC reactivity, and RO2 branching ratio. The positional inputs are:\n\nno - NO concentration in molec. cm^-3\nno2 - NO2 concentration in molec. cm^-3\nphox - HOx production rate in molec. cm^-3 s^-1\nalpha - NO + RO2 branching ratio\n\noptions must be a SteadyStateOptions instance, it can be used to change more detailed options in the model. \n\nThis returns a SteadyStateResult instance which contains the final state of the model.\n\n\n\n\n\n","category":"function"},{"location":"api/#HSSModel.SteadyStateSolvers.SteadyStateOptions","page":"API","title":"HSSModel.SteadyStateSolvers.SteadyStateOptions","text":"SteadyStateOptions(;T::Real=298, M::Real=2e19, rh::Real=0.01, \n                    k_RO2NO::Real=8e-12, k_RO2HO2::Real=8e-12, k_RO2RO2::Real=6.8e-14,\n                    k4::Real=1.1e-11, k2eff::Real=8e-12, k5eff::Real=5e-12)\n\nConstruct a SteadyStateOptions instance, that is a structure that controls the options for the HOx steady state solver. All parameters are keyword arguments. Available parameters and their default values are:\n\nT (default: 298) - air temperature in Kelvin\nM (default: 2  10^19) - number density of air in molec. cm^-3.\nrh (default: 0.01) - mole fraction of H2O in the air, i.e. rh * M  is the number density of H2O used in the model.\nk_RO2NO (default: 8  10^-12) - fixed rate constant for the NO + RO2 → NO2 + RO  reaction. Since this needs to be an effective rate for the mixing of RO2 radicals, it is just used as a fixed value and doesn't change with T and M. Units of molec^-1 cm^3 s^-1.\nk_RO2HO2 (default: 8  10^-12) - fixed rate constant for the RO2 + HO2 loss pathway. Like k_RO2NO, this doesn't vary with T and M. Units of molec^-1 cm^3 s^-1.\nk_RO2RO2 (default: 68  10^-14) - fixed rate constant for the RO2 + RO2 loss pathway. Like k_RO2NO, this doesn't vary with T and M. Units of molec^-1 cm^3 s^-1.\nk4 (default: 11  10^-11) - rate constant for NO2 + OH → HNO3 reaction only in the  initial guess for OH. Units of molec^-1 cm^3 s^-1.\nk2eff (default: 8  10^-12) - effective rate constant for the NO + RO2 → NO2 + RO reaction  only in the initial guess for OH. Units of molec^-1 cm^3 s^-1.\nk5eff (default: 5  10^-12) - effective rate constant for the RO2 and HO2 self-reaction  only in the initial guess for OH. Units of molec^-1 cm^3 s^-1.\n\n\n\n\n\n","category":"type"},{"location":"api/#HSSModel.SteadyStateSolvers.SteadyStateResult","page":"API","title":"HSSModel.SteadyStateSolvers.SteadyStateResult","text":"Struct to hold the final state of the NOx-HOx steady state model. All concentrations are in molec. cm^-3 s^-1. The following fields have the steady state solution:\n\noh - OH steady-state concentration\nho2 - HO2 steady-state concentration\nro2 - RO2 steady-state concentration\n\nAdditional fields store input or internal variables to aid in plotting, calculating derived quantities, or debugging:\n\nno - NO concentration (from input)\nno2 - NO2 concentration (from input)\nvocr - VOC reactivity in s^-1\nphox - HOx production rate in molec. cm^-3 s^-1\nalpha - NO + RO2 branching ratio\nrates - a dictionary of all rate constants (both specified and calculated) used in the solution\noptions - the input SteadyStateOptions structure.\nsolver_results - the NLSolve.SolverResults structure returned by the solver that found the optimum solution to the NOx-HOx steady state equations.\n\n\n\n\n\n","category":"type"},{"location":"api/#HSSModel.SteadyStateSolvers.nonlin_nox_analytic_model","page":"API","title":"HSSModel.SteadyStateSolvers.nonlin_nox_analytic_model","text":"nonlin_nox_analytic_model(no::Real, no2::Real; kwargs...)::Real\n\nCompute OH concentrations given NO and NO2 concentrations along with additional kinetics parameters defined by the keyword argument. All concentrations are in molec. cm^-3.\n\nThis uses the steady state model described in Murphy et al., ACP, 2006:  \"The weekend effect within and downwind of Sacramento: Part 2.  Observational evidence for chemical and dynamical contributions\" (doi: 10.5194/acpd-6-11971-2006). See Eqs. 3, 4, and 5.\n\nThe keyword arguments, with defaults in  are:\n\nphox (6.25e6) - HOx production rate in molec. cm^-3 s^-1.\nvocr (5.8) - Total VOC OH reactivity in s^-1\nalpha (0.04) - RO2 + NO branching ratio, unitless.\nk4 (1.1e-11) - Rate constant for OH + NO2 –> HNO3 in cm^3 molec^-1 s^-1\nk2eff (8e-12) - Effective reaction rate of NO with RO2 in cm^3 molec^-1 s^-1\nk5eff (5e-12) - Effective reaction rate of RO2 and HO2 self reaction in cm^3 molec^-1 s^-1\n\n\n\n\n\nnonlin_nox_analytic_model(nox::Real; no2_no::Real=4, kwargs...)::Real\n\nCompute OH concentration from NOx concentration and an NO2:NO ratio, which defaults to 4:1.\n\n\n\n\n\n","category":"function"},{"location":"api/#DerivedQuantities-module","page":"API","title":"DerivedQuantities module","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = HSSModel.DerivedQuantities","category":"page"},{"location":"api/","page":"API","title":"API","text":"nox_lifetime\nozone_prod_efficiency\nozone_prod\nnox_loss","category":"page"},{"location":"api/#HSSModel.DerivedQuantities.nox_lifetime","page":"API","title":"HSSModel.DerivedQuantities.nox_lifetime","text":"nox_lifetime(result::SteadyStateSolvers.SteadyStateResult)::Dict\n\nCompute NOx lifetimes from a steady state model result. The return value is a dictionary with keys \"total\", \"hno3\", and \"ans\" which correspond to the overall lifetime, lifetime w.r.t. loss to HNO3, and lifetime w.r.t. loss to alkyl nitrates, respectively. Lifetimes are in hours.\n\n\n\n\n\n","category":"function"},{"location":"api/#HSSModel.DerivedQuantities.ozone_prod_efficiency","page":"API","title":"HSSModel.DerivedQuantities.ozone_prod_efficiency","text":"ozone_prod_efficiency(result::SteadyStateSolvers.SteadyStateResult)\n\nCompute the OPE at the final steady state balance returned by a single run of the steady state model. Returns the OPE as a scalar value. OPE is calculated as:\n\nmathrmOPE = fracP(mathrmO_3)L(mathrmNO_x) = frack_mathrmNO+HO2mathrmNOmathrmHO_2 + (1-alpha)k_mathrmNO+RO2mathrmNOmathrmRO_2k_mathrmNO2+OHmathrmNO_2mathrmOH + alpha k_mathrmNO+RO2mathrmNOmathrmRO_2\n\nThis follows the basic formulation described in Kleinman et al. 2002, but calculates each component more directly (since the precise HO2 and RO2 concentrations from the model are available) and accounts for alkyl nitrate formation.\n\n\n\n\n\n","category":"function"},{"location":"api/#HSSModel.DerivedQuantities.ozone_prod","page":"API","title":"HSSModel.DerivedQuantities.ozone_prod","text":"ozone_prod(result::SteadyStateSolvers.SteadyStateResult)\n\nCalculates the rate of ozone production given a steady state returned  by the model. Returns a scalar value in units of molec. cm^-3 s^-1. This is calculated as:\n\nP(mathrmO_3) = k_mathrmNO+HO2mathrmNOmathrmHO_2 + (1-alpha)k_mathrmNO+RO2mathrmNOmathrmRO_2\n\n\n\n\n\n","category":"function"},{"location":"api/#HSSModel.DerivedQuantities.nox_loss","page":"API","title":"HSSModel.DerivedQuantities.nox_loss","text":"nox_loss(result::SteadyStateSolvers.SteadyStateResult)\n\nCalculates the rate of NOx loss given a steady state returned  by the model. Returns a scale value in units of molec. cm^-3 s^-1. This is calculated as:\n\nL(mathrmNO_x) = k_mathrmNO2+OHmathrmNO_2mathrmOH + alpha k_mathrmNO+RO2mathrmNOmathrmRO_2\n\n\n\n\n\n","category":"function"},{"location":"#HSSModel.jl-Documentation","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"","category":"section"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"HSSModel implements a basic NOx-HOx steady state model that can be used to compute NOx lifetime, ozone production efficency, and other quantities for theoretical conditions.","category":"page"},{"location":"#Installation","page":"HSSModel.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"Currently, this package is only available to install from GitHub. From the Julia REPL:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"julia> ]add https://github.com/joshua-laughner/HSSModel.git","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"Since this will track the master branch, you may also wish to pin this package  so that it does not update until you want it to:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"julia> ]pin HSSModel","category":"page"},{"location":"#Basic-Walkthrough","page":"HSSModel.jl Documentation","title":"Basic Walkthrough","text":"","category":"section"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"Importing HSSModel exposes the main driver function, hox_ss_solver from the SteadyStateSolvers module. This function requires 5 inputs:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"NO concentration (in molec. cm^-3)\nNO2 concentration (in molec. cm^-3)\nHOx production rate (in molec. cm^-3 s^-1)\nTotal VOC reactivity (in s^-1)\nThe NO + RO2 branching ratio, alpha (unitless).","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"For this example, we'll be using values from Table 4 of  Murphy et al. 2006 for P(HOx), VOC reactivity, and alpha, plus we will assume 5 ppb of NOx. Since our inputs need to be in number density, rather than mixing ratio, we'll need the number density of air to convert.","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"# gas constant in Pa cm^3 K^-1 molec^-1\nR = 8.314 * 1e6 / 6.022e23\n\n# number density of air at STP\nnair = 101325 / (R * 298)\n\n# Convert from NOx in ppb to NO and NO2 in molec. cm^-3\n# assuming a 4:1 NO2:NO ratio\nnox_ppb = 5;\nno_nd = nox_ppb*1e-9 * 0.2 * nair;\nno2_nd = nox_ppb*1e-9 * 0.8 * nair;\n\n# Other default values from Murphy et al. 2006\nphox = 2.5e-9 * nair / 3600;  # convert ppb hr^-1 -> molec. cm^-3 s^-1\nvocr = 5.8;\nalpha = 0.04;\n\nnothing # hide","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"With these conditions, we call the steady state solver, which will compute the steady state concentrations of OH, HO2, and RO2 given these fixed values.","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"using HSSModel;\nresult = hox_ss_solver(no_nd, no2_nd, phox, vocr, alpha);\n\nprintln(\"OH = $(result.oh), HO2 = $(result.ho2), RO2 = $(result.ro2)\");","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"This result structure contains information about the steady state concentrations, as well as the model configuration. Generally, most information you would need to plot the model results is contained in this structure. ","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"These result structure can also be use to calculate secondary quantities. The DerivedQuantities module exports two functions to do so: nox_lifetime and ozone_production_efficiency. Calling these with your results produces:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"nox_lifetime(result)","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"This returns a dictionary with three different lifetimes, in hours:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"total is the overall NOx lifetime.\nhno3 is the lifetime with respect to loss to HNO3\nans is the lifetime with respect to loss to alkyl nitrates","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"ozone_prod_efficiency(result)","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"Unlike nox_lifetime, this returns a single value. This represents the ratio of ozone production to NOx loss.","category":"page"},{"location":"#Running-an-ensemble","page":"HSSModel.jl Documentation","title":"Running an ensemble","text":"","category":"section"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"The steady state model function works well with Julia's built in  broadcasting behavior. For a simple example, let's look at running a range of NOx concentrations:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"# Compute NO and NO2 number densities for logarithmically-spaced\n# NOx mixing ratios between 0.01 and 10 ppb, still assuming a\n# 4:1 NO2:NO ratio.\nnox_nd = exp10.(range(-2., stop=1., length=20)) .* 1e-9 .* nair;\nno2_nd = 0.8 .* nox_nd;\nno_nd = 0.2 .* nox_nd;\n\n# Note the broadcasting operator (the period following `hox_ss_solver`)\nresults = hox_ss_solver.(no_nd, no2_nd, phox, vocr, alpha);\nsize(results)","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"If you want to test an ensemble with multiple variables, you can  use broadcasting in multiple dimensions. In this example, we'll use the same NOx vector (a 1D, 75 element vector) along with a vector of VOC reactivity values. By making the VOCR values a row (1-by-N) vector, the broadcasting will result in a  2D array of results.","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"# Create a 1-by-10 vector of VOC reactivities\nvocr_vec = collect(transpose(range(1., stop=10., length=10)));\nresults = hox_ss_solver.(no_nd, no2_nd, phox, vocr_vec, alpha);\nsize(results)","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"A useful trick for quickly extracting values from these results arrays (for plotting or downstread analysis) is to broadcast the getfield function:","category":"page"},{"location":"","page":"HSSModel.jl Documentation","title":"HSSModel.jl Documentation","text":"getfield.(results, :oh)","category":"page"}]
}
